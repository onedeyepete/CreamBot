<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ticket Logs</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"></noscript>
    <style>
        body {
            font-family: 'Nunito', sans-serif;
            background: #0b0d17;
            color: #dcddde;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            overflow-x: hidden;
        }
        .navbar {
            background-color: transparent;
            color: #fff;
            padding: 20px 50px;
            box-shadow: none;
            width: 100%;
            position: fixed;
            top: 0;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
        }
        .navbar-brand {
            color: #fff;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
        }
        .navbar-brand i {
            margin-right: 10px;
        }
        .navbar-nav .nav-link {
            color: #fff !important;
            margin: 0 15px;
            font-size: 1rem;
        }
        .content {
            padding: 100px 50px 20px;
            flex: 1;
        }
        .content .filters {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        .content .filters .filter-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .content .filters .filter-buttons .btn {
            background-color: #42454a;
            color: #dcddde;
            border: none;
            transition: background 0.3s, color 0.3s;
        }
        .content .filters .filter-buttons .btn.active,
        .content .filters .filter-buttons .btn:hover {
            background-color: #7289da;
            color: white;
        }
        .content .filters .search-form {
            display: flex;
            align-items: center;
            position: relative;
            flex-wrap: nowrap;
        }
        .content .filters .search-form .form-control {
            background-color: #2f3136;
            border: 1px solid #42454a;
            color: #dcddde;
            margin-left: 10px;
            border-radius: 4px;
        }
        .content .filters .search-form .form-control::placeholder {
            color: #b9bbbe;
        }
        .table {
            width: 100%;
            color: #dcddde;
            background-color: #2f3136;
            border-radius: 8px;
            overflow: hidden;
        }
        .table th, .table td {
            color: #dcddde;
            border-top: 1px solid #42454a;
            padding: 15px;
            word-wrap: break-word;
        }
        .table th {
            background-color: #202225;
        }
        .pagination {
            justify-content: center;
            margin-top: 20px;
        }
        .pagination .page-item .page-link {
            background-color: #2f3136;
            color: #dcddde;
            border: none;
            margin: 0 5px;
            cursor: pointer;
            border-radius: 4px;
        }
        .pagination .page-item.active .page-link {
            background-color: #7289da;
        }
        @media (max-width: 768px) {
            .table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }
            .content .filters {
                flex-direction: column;
                align-items: flex-start;
            }
            .content .filters .search-form {
                margin-top: 10px;
                width: 100%;
            }
            .content .filters .search-form .form-control {
                margin-left: 0;
                margin-top: 10px;
            }
        }
        .autocomplete-items {
            position: absolute;
            border: 1px solid #42454a;
            z-index: 99;
            top: 100%;
            left: 10px;
            right: 0;
            background-color: #2f3136;
            border-radius: 4px;
            margin-top: 5px;
            overflow: hidden;
        }
        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #42454a;
        }
        .autocomplete-items div:hover {
            background-color: #7289da;
        }
        .autocomplete-active {
            background-color: #7289da !important;
            color: #ffffff;
        }
        .badge-status {
            padding: 5px 10px;
            border-radius: 12px;
        }
        .status-open {
            background-color: #28a745; /* Green */
            color: white;
        }
        .status-closed {
            background-color: #6c757d; /* Grey */
            color: white;
        }
        .status-deleted {
            background-color: #dc3545; /* Red */
            color: white;
        }
        .empty-message {
            text-align: center;
            margin-top: 50px;
            color: #7289da;
            font-size: 1.5rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <a class="navbar-brand" href="/">
            <i class="fas fa-ticket-alt"></i>
            Drako Development
        </a>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/ticket-logs">Tickets</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/system-alerts">Alerts</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/stats">Stats</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="https://builtbybit.com/resources/drako-bot-multi-purpose-discord-bot.22266/" target="_blank">BuiltByBit</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="https://discord.gg/drakobot" target="_blank">Discord</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn btn-danger" href="/logout">Logout</a>
                </li>
            </ul>
        </div>
    </nav>
    <div class="content">
        <div class="filters">
            <div class="filter-buttons">
                <button class="btn active" data-filter="all">All Tickets</button>
                <button class="btn" data-filter="open">Open Tickets</button>
                <button class="btn" data-filter="closed">Closed Tickets</button>
                <button class="btn" data-filter="deleted">Deleted Tickets</button>
            </div>
            <div class="search-form">
                <input type="date" id="start-date" class="form-control">
                <input type="date" id="end-date" class="form-control">
                <input type="text" id="search-owner" class="form-control" placeholder="Search by Owner">
            </div>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Channel Name</th>
                    <th>Requester</th>
                    <th>Last Message Date</th>
                    <th>Status</th>
                    <th class="text-right">Actions</th>
                </tr>
            </thead>
            <tbody id="tickets-table-body">
                <% tickets.forEach(ticket => { %>
                    <tr>
                        <td><%= ticket.channelName %></td>
                        <td><%= ticket.requesterName %></td>
                        <td><%= ticket.lastMessageDate ? (new Date(ticket.lastMessageDate).toString() === 'Invalid Date' ? 'No Message Found' : new Date(ticket.lastMessageDate).toLocaleDateString('en-GB') + ' ' + new Date(ticket.lastMessageDate).toLocaleTimeString('en-GB')) : 'No Message Found' %></td>
                        <td><span class="badge badge-status status-<%= ticket.status %>"><%= ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1) %></span></td>
                        <td class="text-right">
                            <form action="/transcript/<%= ticket.ticketId %>" method="get" target="_blank">
                                <button class="btn btn-primary btn-sm">View</button>
                            </form>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
        <div id="empty-message" class="empty-message" style="display: none;">
            <p>Well this is awkward...</p>
        </div>
        <nav>
            <ul class="pagination">
                <!-- Pagination will be dynamically inserted here -->
            </ul>
        </nav>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tickets = <%- JSON.stringify(tickets) %>;
            const owners = <%- JSON.stringify(owners) %>;
            const itemsPerPage = 10;
            let currentPage = 1;
            let currentFilter = 'all';
            let filteredTickets = [];

            const renderTickets = (page) => {
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;

                filteredTickets = tickets.filter(ticket => {
                    const matchesStatus = currentFilter === 'all' || ticket.status.toLowerCase() === currentFilter;
                    const ownerInput = document.getElementById('search-owner');
                    const startDateInput = document.getElementById('start-date');
                    const endDateInput = document.getElementById('end-date');
                    const owner = ownerInput ? ownerInput.value.toLowerCase() : '';
                    const startDate = startDateInput ? startDateInput.value : '';
                    const endDate = endDateInput ? endDateInput.value : '';
                    const matchesOwner = owner ? (ticket.requesterName ? ticket.requesterName.toLowerCase().includes(owner) : false) : true;
                    const matchesDate = (!startDate || new Date(ticket.createdAt) >= new Date(startDate)) &&
                                        (!endDate || new Date(ticket.createdAt) <= new Date(endDate));
                    return matchesStatus && matchesOwner && matchesDate;
                });

                const ticketsToShow = filteredTickets.slice(start, end);
                const ticketsTableBody = document.getElementById('tickets-table-body');
                ticketsTableBody.innerHTML = '';

                if (ticketsToShow.length === 0) {
                    document.getElementById('empty-message').style.display = 'block';
                } else {
                    document.getElementById('empty-message').style.display = 'none';
                }

                ticketsToShow.forEach(ticket => {
                    const lastMessageDate = new Date(ticket.lastMessageDate);
                    const lastMessageDateText = isNaN(lastMessageDate.getTime()) ? 'No Message Found' : `${lastMessageDate.toLocaleDateString('en-GB')} ${lastMessageDate.toLocaleTimeString('en-GB')}`;

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${ticket.channelName}</td>
                        <td>${ticket.requesterName}</td>
                        <td>${lastMessageDateText}</td>
                        <td><span class="badge badge-status status-${ticket.status}">${ticket.status.charAt(0).toUpperCase() + ticket.status.slice(1)}</span></td>
                        <td class="text-right">
                            <form action="/transcript/${ticket.ticketId}" method="get" target="_blank">
                                <button class="btn btn-primary btn-sm">View</button>
                            </form>
                        </td>
                    `;
                    ticketsTableBody.appendChild(row);
                });

                renderPagination(page, filteredTickets.length);
            };

            const renderPagination = (page, totalItems) => {
                const pagination = document.querySelector('.pagination');
                pagination.innerHTML = '';
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                const maxPages = 5; // Maximum number of pages to display in the pagination

                const createPageItem = (pageNum) => {
                    const pageItem = document.createElement('li');
                    pageItem.classList.add('page-item');
                    if (pageNum === page) pageItem.classList.add('active');
                    const link = document.createElement('a');
                    link.classList.add('page-link');
                    link.href = '#';
                    link.dataset.page = pageNum;
                    link.textContent = pageNum;
                    pageItem.appendChild(link);
                    return pageItem;
                };

                if (page > 1) {
                    const firstItem = document.createElement('li');
                    firstItem.classList.add('page-item');
                    const firstLink = document.createElement('a');
                    firstLink.classList.add('page-link');
                    firstLink.href = '#';
                    firstLink.dataset.page = 1;
                    firstLink.textContent = 'First';
                    firstItem.appendChild(firstLink);
                    pagination.appendChild(firstItem);
                }
                const prevItem = document.createElement('li');
                prevItem.classList.add('page-item');
                if (page === 1) {
                    prevItem.classList.add('disabled');
                }
                const prevLink = document.createElement('a');
                prevLink.classList.add('page-link');
                prevLink.href = '#';
                prevLink.dataset.page = 'prev';
                prevLink.textContent = 'Prev';
                prevItem.appendChild(prevLink);
                pagination.appendChild(prevItem);

                let startPage = Math.max(1, page - Math.floor(maxPages / 2));
                let endPage = Math.min(totalPages, startPage + maxPages - 1);

                if (endPage - startPage < maxPages - 1) {
                    startPage = Math.max(1, endPage - maxPages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    pagination.appendChild(createPageItem(i));
                }

                const nextItem = document.createElement('li');
                nextItem.classList.add('page-item');
                if (page === totalPages) {
                    nextItem.classList.add('disabled');
                }
                const nextLink = document.createElement('a');
                nextLink.classList.add('page-link');
                nextLink.href = '#';
                nextLink.dataset.page = 'next';
                nextLink.textContent = 'Next';
                nextItem.appendChild(nextLink);
                pagination.appendChild(nextItem);
                if (page < totalPages) {
                    const lastItem = document.createElement('li');
                    lastItem.classList.add('page-item');
                    const lastLink = document.createElement('a');
                    lastLink.classList.add('page-link');
                    lastLink.href = '#';
                    lastLink.dataset.page = totalPages;
                    lastLink.textContent = 'Last';
                    lastItem.appendChild(lastLink);
                    pagination.appendChild(lastItem);
                }

                document.querySelectorAll('.pagination .page-link').forEach(link => {
                    link.addEventListener('click', (event) => {
                        event.preventDefault();
                        const targetPage = event.target.dataset.page;

                        if (targetPage === 'prev' && currentPage > 1) {
                            currentPage--;
                        } else if (targetPage === 'next' && currentPage < totalPages) {
                            currentPage++;
                        } else if (!isNaN(targetPage)) {
                            currentPage = Number(targetPage);
                        }

                        renderTickets(currentPage);
                    });
                });
            };

            document.querySelectorAll('.filter-buttons .btn').forEach(button => {
                button.addEventListener('click', (event) => {
                    event.preventDefault();
                    document.querySelector('.filter-buttons .btn.active').classList.remove('active');
                    event.currentTarget.classList.add('active');
                    currentFilter = event.currentTarget.dataset.filter;
                    renderTickets(1);
                });
            });

            document.getElementById('start-date').addEventListener('change', () => renderTickets(1));
            document.getElementById('end-date').addEventListener('change', () => renderTickets(1));
            document.getElementById('search-owner').addEventListener('input', () => renderTickets(1));

            const autocomplete = (input, array) => {
                let currentFocus;
                input.addEventListener("input", function(e) {
                    const val = this.value;
                    closeAllLists();
                    if (!val) return false;
                    currentFocus = -1;
                    const a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    this.parentNode.appendChild(a);
                    array.forEach(item => {
                        if (item.substr(0, val.length).toUpperCase() === val.toUpperCase()) {
                            const b = document.createElement("DIV");
                            b.innerHTML = "<strong>" + item.substr(0, val.length) + "</strong>";
                            b.innerHTML += item.substr(val.length);
                            b.innerHTML += "<input type='hidden' value='" + item + "'>";
                            b.addEventListener("click", function(e) {
                                input.value = this.getElementsByTagName("input")[0].value;
                                renderTickets(1);
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    });
                });

                input.addEventListener("keydown", function(e) {
                    let x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode === 40) {
                        currentFocus++;
                        addActive(x);
                    } else if (e.keyCode === 38) {
                        currentFocus--;
                        addActive(x);
                    } else if (e.keyCode === 13) {
                        e.preventDefault();
                        if (currentFocus > -1) {
                            if (x) x[currentFocus].click();
                        }
                    }
                });

                const addActive = (x) => {
                    if (!x) return false;
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = x.length - 1;
                    x[currentFocus].classList.add("autocomplete-active");
                };

                const removeActive = (x) => {
                    for (let i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                };

                const closeAllLists = (elmnt) => {
                    const x = document.getElementsByClassName("autocomplete-items");
                    for (let i = 0; i < x.length; i++) {
                        if (elmnt !== x[i] && elmnt !== input) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                };

                document.addEventListener("click", function(e) {
                    closeAllLists(e.target);
                });
            };

            autocomplete(document.getElementById('search-owner'), owners);

            renderTickets(currentPage);
        });
    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" defer></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js" defer></script>
</body>
</html>